# This workflow is meant to be called remotely from a Skip app project.
#
# The action will build and test both the Swift and Gradle projects 
# transpiled through Skip.
#
# When tagged with a semantic version (e.g., "1.2.3"), the action will
# create and distribute release .apk and .ipa artifacts from the project.
#
# An example invocation script is as follows, which runs for 
# every push, every PR, every semver tag, and every day at noon GMT:
#
# name: skipapp
# on:
#   push:
#     branches: '*'
#     tags: "[0-9]+.[0-9]+.[0-9]+"
#   schedule:
#     - cron: '0 12 * * *'
#   workflow_dispatch:
#   pull_request:
# 
# permissions:
#   contents: write
# 
# jobs:
#   call-workflow:
#     uses: skiptools/actions/.github/workflows/skip-app.yml@v1
# 
name: "Skip App CI"
on:
  workflow_call:
    inputs:
      brew-install:
        required: false
        type: string
      run-local-tests:
        required: false
        type: boolean
        default: true
    secrets:
      KEYSTORE_PROPERTIES:
        required: false
      KEYSTORE_JKS:
        required: false
      GOOGLE_PLAY_APIKEY:
        required: false
      APPLE_APPSTORE_APIKEY:
        required: false
      APPLE_CERTIFICATES_P12:
        required: false
      APPLE_CERTIFICATES_P12_PASSWORD:
        required: false
      APPLE_MOBILEPROVISION:
        required: false
jobs:
  skip-app:
    runs-on: macos-15
    timeout-minutes: 120
    env:     
      DEVELOPER_DIR: /Applications/Xcode_16.4.app/Contents/Developer
    steps:
      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: homebrew-packages

      - uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: current
          add-job-summary: 'on-failure'

      - name: Install Skip
        run: brew install skiptools/skip/skip tree ${{ inputs.brew-install }} || (brew update && brew install skiptools/skip/skip tree ${{ inputs.brew-install }})

      - run: skip doctor

      # larger projects sometimes yield: Unhandled exception. System.IO.IOException: No space left on device : '/Users/runner/runners/â€¦
      - name: Free Disk Space
        run: sudo rm -rf /Applications/Xcode_14*.app /Applications/Xcode_15*.app /Applications/Xcode_16.app /Applications/Xcode_16.1.app /Applications/Xcode_16_2.app /Applications/Xcode_16.3.app

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup
        id: setup
        env:
          KEYSTORE_PROPERTIES: ${{ secrets.KEYSTORE_PROPERTIES }}
        run: |
          # convert "refs/tags/1.0.0" to "1.0.0"
          # and "refs/heads/main" to "main"
          TAG=${GITHUB_REF#refs/*/}
          # the version if it matches the semantic tag pattern, otherwise "dev"
          echo "RELTAG=${TAG:-'dev'}" >> $GITHUB_ENV

          echo "COMMIT_DATE=$(git log -1 --format=%ad --date=iso-strict ${TAG})" >> $GITHUB_ENV

          # the primary skip module is the first product name
          SKIP_MODULE=$(basename Darwin/*.xcodeproj .xcodeproj)
          echo "SKIP_MODULE=${SKIP_MODULE}" >> $GITHUB_ENV

          # update Skip.env to set version string to the latest semver tag
          sed -i '' "s;MARKETING_VERSION = .*;MARKETING_VERSION = $(git describe --tags --abbrev=0 --match '[0-9]*\.[0-9]*\.[0-9]*' --first-parent);g" Skip.env

          # update Skip.env to set build number to the git commit count
          sed -i '' "s;PRODUCT_VERSION = .*;PRODUCT_VERSION = $(git rev-list --count HEAD);g" Skip.env

          # the emulator we use should match the host architecture
          echo "android-arch=$(uname -m | sed 's/arm64/arm64-v8a/')" >> $GITHUB_OUTPUT

          # check whether the KEYSTORE_PROPERTIES secret exists,
          # and if so we will run the signing option later
          echo 'android-keystore-exists=$(test -z "${KEYSTORE_PROPERTIES}" && echo "false" || echo "true")' >> $GITHUB_OUTPUT

          # check whether any of the skip.yml files in the project
          # presume the native toolchain 
          yq -e '.skip.mode' Sources/*/Skip/skip.yml >> /dev/null && echo "native-toolchain=required" >> $GITHUB_OUTPUT || echo "Native toolchain not needed"

          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES

      - name: Install Swift Android Toolchain
        if: ${{ steps.setup.outputs.native-toolchain == 'required' }}
        run: |
          brew install skiptools/skip/swift-android-toolchain@6.1
          # Add the toolchain to the SKIP_SWIFT_PATH environment
          # that is used by the skip tool when forking Swift
          #echo "SKIP_SWIFT_PATH=${HOME}/Library/Developer/Toolchains/swift-6.0.1-RELEASE.xctoolchain/usr/bin/swift" >> $GITHUB_ENV

      - name: Verify Skip App
        run: skip verify || skip verify --verbose

      - name: Setup Android App Signing
        if: ${{ env.KEYSTORE_PROPERTIES != '' }}
        env:
          KEYSTORE_JKS: ${{ secrets.KEYSTORE_JKS }}
          KEYSTORE_PROPERTIES: ${{ secrets.KEYSTORE_PROPERTIES }}
        run: |
          echo -n "${KEYSTORE_JKS}" | base64 --decode > Android/app/keystore.jks
          echo -n "${KEYSTORE_PROPERTIES}" | base64 --decode > Android/app/keystore.properties

      - name: Setup Darwin App Signing
        uses: apple-actions/import-codesign-certs@v3
        if: ${{ env.APPLE_CERTIFICATES_P12 != '' }}
        env:
          APPLE_CERTIFICATES_P12: ${{ secrets.APPLE_CERTIFICATES_P12 }}
        with: 
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_P12_PASSWORD }}

      - name: Export project
        run: |
          # need to run twice due to a bug with duplicate resources
          skip export -v --debug -d skip-export --show-tree --summary-file=$GITHUB_STEP_SUMMARY
          skip export -v --release -d skip-export --show-tree --summary-file=$GITHUB_STEP_SUMMARY
          cp -a Package.resolved skip-export/

      - name: Android Fastlane
        working-directory: Android
        run: test ! -d fastlane || fastlane assemble

      - name: Darwin Fastlane
        working-directory: Darwin
        run: test ! -d fastlane || FASTLANE_SKIP_ARCHIVE=YES FASTLANE_SKIP_CODESIGNING=YES FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT=300 FASTLANE_XCODEBUILD_SETTINGS_RETRIES=5 fastlane assemble

      - name: Run Tests
        if: ${{ inputs.run-local-tests == true && !startsWith(github.ref, 'refs/tags/') }}
        run: test ! -d Tests || skip test || skip test -v

      - name: "Create GitHub Release"
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ github.token }}
        # Create a release or upload the assets if the release already exists
        run: gh release create "${RELTAG}" -t "Release ${RELTAG}" --generate-notes skip-export/*.* || gh release upload "${RELTAG}" --clobber skip-export/*.*

      - name: Submit iOS App to App Store
        env:
          APPLE_APPSTORE_APIKEY: ${{ secrets.APPLE_APPSTORE_APIKEY }}
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.APPLE_APPSTORE_APIKEY != '' }}
        working-directory: Darwin
        # import of provisioning profile happens from Darwin/fastlane/Fastfile get_provisioning_profile() now
        #mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
        #echo -n "${{ secrets.APPLE_MOBILEPROVISION }}" | base64 --decode -o ~/Library/MobileDevice/Provisioning\ Profiles/app.mobileprovision
        run: |
          echo -n "${{ secrets.APPLE_APPSTORE_APIKEY }}" | base64 --decode -o fastlane/apikey.json
          fastlane release

      - name: Submit Android App to Play Store
        env:
          GOOGLE_PLAY_APIKEY: ${{ secrets.GOOGLE_PLAY_APIKEY }}
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.GOOGLE_PLAY_APIKEY != '' }}
        working-directory: Android
        run: |
          echo -n "${GOOGLE_PLAY_APIKEY}" | base64 --decode > fastlane/apikey.json
          fastlane release

      - name: "Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        if: always()
        with: 
          path: skip-export/

