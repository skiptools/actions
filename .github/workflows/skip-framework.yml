# This workflow is meant to be called remotely from a Skip framework project.
#
# The action will build and test both the Swift and Gradle projects 
# transpiled through Skip.
#
# When tagged with a semantic version (e.g., "1.2.3"), the action will
# create and distribute release .aar and .jar artifacts from the project.
#
# An example invocation script is as follows, which runs for 
# every push, every PR, every semver tag, and every day at noon GMT:
#
# name: skipapp
# on:
#   push:
#     branches: '*'
#     tags: "[0-9]+.[0-9]+.[0-9]+"
#   schedule:
#     - cron: '0 12 * * *'
#   workflow_dispatch:
#   pull_request:
# 
# permissions:
#   contents: write
# 
# jobs:
#   call-workflow:
#     uses: skiptools/actions/.github/workflows/skip-framework.yml@v1
# 
name: "Skip Framework CI"
on:
  workflow_call:
    inputs:
      # only macos-13 has hypervisor support for the Android emulator
      # https://github.com/ReactiveCircus/android-emulator-runner/issues/350
      runs-on:
        required: false
        type: string
        default: "['macos-13']"
      brew-install:
        required: false
        type: string
      install-swift:
        required: false
        type: string
      run-export:
        required: false
        type: boolean
        default: true
      run-local-tests:
        required: false
        type: boolean
        default: true
      run-ios-tests:
        required: false
        type: boolean
        default: true
      run-android-tests:
        required: false
        type: boolean
        default: true
      android-native-disabled:
        required: false
        type: boolean
        default: false
      run-android-native-build:
        required: false
        type: string
      emulator-api-level:
        required: false
        type: string
        default: '28'
      emulator-channel:
        required: false
        type: string
        default: 'stable'
      emulator-profile:
        required: false
        type: string
        default: 'Nexus 4'
      emulator-target:
        required: false
        type: string
        default: 'default'

jobs:
  skip-framework:
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.runs-on) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    steps:
      - name: Cache Homebrew packages
        if: ${{ startsWith(matrix.os, 'macos-') }}
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: homebrew-packages

      - name: Setup Swift
        if: ${{ inputs.install-swift != '' }}
        uses: swift-actions/setup-swift@next
        # Change this to @v3 once https://github.com/swift-actions/setup-swift/pull/710 lands
        with:
          swift-version: ${{ inputs.install-swift }}

      - name: Get swift version
        run: swift --version

      - uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: current
          add-job-summary: 'on-failure'

      - name: Install Skip (macOS)
        if: ${{ startsWith(matrix.os, 'macos-') }}
        run: brew install skiptools/skip/skip tree ${{ inputs.brew-install }} || (brew update && brew install skiptools/skip/skip tree ${{ inputs.brew-install }})

      - name: Install Skip (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu-') }}
        run: |
          mkdir -p ~/bin/skiptools
          cd ~/bin/skiptools
          curl -fsSLO https://github.com/skiptools/skip/releases/latest/download/skip-linux.zip
          unzip skip-linux.zip
          echo "PATH=${PWD}/skip.artifactbundle/$(uname -m)-swift-linux-musl:${PATH}" >> $GITHUB_ENV
          cd -

      - run: skip doctor || true

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Verify Project
        run: skip verify

      - name: Setup Environment
        id: setup
        run: |
          # convert "refs/tags/1.0.0" to "1.0.0"
          # and "refs/heads/main" to "main"
          TAG=${GITHUB_REF#refs/*/}
          # the version if it matches the semantic tag pattern, otherwise "dev"
          echo "RELTAG=${TAG:-'dev'}" >> $GITHUB_ENV
          # the emulator we use should match the host architecture
          echo "android-arch=$(uname -m | sed 's/arm64/arm64-v8a/')" >> $GITHUB_OUTPUT
          # disable user confirmation to process macros
          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES || true

          if [[ ${{ inputs.android-native-disabled }} != true ]]; then
            # check whether we use skip-bridge and so need the Android toolchain
            SKIP_BRIDGE=1 swift package resolve
            test -d Sources/SkipBridge || jq -e '.pins | any(.identity == "skip-bridge")' Package.resolved >> /dev/null && echo "native-toolchain=required" >> $GITHUB_OUTPUT || echo "Swift Android toolchain not required"

            # need to use NDK 27 for Android tool chain build, but macos-13 defaults to NDK 26
            if [ "${{ matrix.os }}" == "macos-13" ]; then
              echo "ANDROID_NDK_HOME=$(ls -1d $HOME/Library/Android/sdk/ndk/27.* | tail -n 1)" >> $GITHUB_ENV
            fi
          fi

      - name: Swift Android Toolchain Build
        id: setup-toolchain
        if: ${{ inputs.run-android-native-build == 'true' || (steps.setup.outputs.native-toolchain == 'required' && inputs.run-android-native-build != 'false') }}
        uses: skiptools/swift-android-action@v2
        with:
          build-tests: false

      - name: Setup Swift Path
        if: ${{ steps.setup.outputs.native-toolchain == 'required' }}
        run: |
          # add the newly installed toolchain to the path
          #echo "${{ steps.setup-toolchain.outputs.swift-install }}/bin" >> $GITHUB_PATH
          echo "${SWIFT_INSTALLATION}/bin" >> $GITHUB_PATH

          # need to hint on Linux where the toolchain is found
          if [ "${{ matrix.os }}" == "ubuntu-*" ]; then
            echo "SWIFT_TOOLCHAIN_DIR=${{ steps.setup-toolchain.outputs.swift-install }}/../.." >> $GITHUB_ENV
            #echo "SWIFT_SDK_HOME=${{ steps.setup-toolchain.outputs.swift-install }}/../.." >> $GITHUB_ENV
          fi

      - name: Check Swift Version
        run: swift --version

      - name: Export project
        if: ${{ startsWith(matrix.os, 'macos-') && inputs.run-export == true }}
        run: |
          rm -rf .build .swiftpm Package.resolved
          skip export -v -d skip-export --show-tree --sdk-path=legacy --summary-file=$GITHUB_STEP_SUMMARY

      - name: Test macOS & Robolectric (local)
        if: ${{ startsWith(matrix.os, 'macos-') && inputs.run-local-tests == true && !startsWith(github.ref, 'refs/tags/') }}
        # workaround for Swift 5.9 error: "error: invalid tool type in 'tools' map" (https://github.com/swiftlang/swift-package-manager/issues/6755)
        run: |
          rm -rf .build .swiftpm Package.resolved
          skip test --verbose

      - name: Test Linux & Robolectric (local)
        if: ${{ startsWith(matrix.os, 'ubuntu-') && inputs.run-local-tests == true && !startsWith(github.ref, 'refs/tags/') }}
        run: |
          # skip test does not yet work on Linux ("SkipDrive not linked")
          swift test

      - name: Test iOS (connected)
        if: ${{ startsWith(matrix.os, 'macos-') && inputs.run-ios-tests == true && !startsWith(github.ref, 'refs/tags/') }}
        run: |
          # choose a pre-installed simulator based on the macos runner
          if [ "${{ matrix.os }}" == "macos-13" ]; then
            SIMDEVICE="iPhone 15"
          elif [ "${{ matrix.os }}" == "macos-14" ]; then
            SIMDEVICE="iPhone 16"
          elif [ "${{ matrix.os }}" == "macos-15" ]; then
            SIMDEVICE="iPhone 17"
          elif [ "${{ matrix.os }}" == "macos-26" ]; then
            SIMDEVICE="iPhone 17"
          else
            # e.g., "macos-latest" or self-hosted/custom runner
            SIMDEVICE="iPhone 17"
          fi

          # run the tests against the first listed scheme, which for a
          # single-module package will just be "project-name",
          # and for a multi-module package will be "project-name-Package"
          # We also need to reverse sort so we will get "project-name-Package"
          # before some other module that might come earlier (like "Auth")
          SKIP_TEST_MODULE=$(xcodebuild -list -json | jq -r '.workspace.schemes | sort_by(.) | reverse | .[0]')
          echo "Testing Skip module: ${SKIP_TEST_MODULE} from schemes list: $(xcodebuild -list -json | jq -r '.workspace.schemes[]')"
          SKIP_ZERO=1 xcodebuild test -sdk iphonesimulator -destination "platform=iOS Simulator,name=${SIMDEVICE}" -skipMacroValidation -skipPackagePluginValidation -configuration debug -scheme ${SKIP_TEST_MODULE}

      - name: Cache Android emulator snapshot
        if: ${{ inputs.run-android-tests == true && !startsWith(github.ref, 'refs/tags/') && matrix.os != 'macos-14' && matrix.os != 'macos-15' && matrix.os != 'macos-26' }}
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: 'avd-${{ inputs.emulator-profile }}_${{ inputs.emulator-channel }}_${{ inputs.emulator-target }}_${{ inputs.emulator-api-level }}_${{ matrix.os }}_${{ steps.setup.outputs.android-arch }}'

      # cache the emulator snapshot to speed up the launch, as per
      # https://github.com/ReactiveCircus/android-emulator-runner
      # note that the actual run must happen with -no-snapshot-save
      # in order to not invalidate the cache
      - name: Generate Android emulator snapshot
        if: ${{ inputs.run-android-tests == true && !startsWith(github.ref, 'refs/tags/') && steps.avd-cache.outputs.cache-hit != 'true' && matrix.os != 'macos-14' && matrix.os != 'macos-15' && matrix.os != 'macos-26' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: ${{ inputs.emulator-target }}
          api-level: ${{ inputs.emulator-api-level }}
          arch: ${{ steps.setup.outputs.android-arch }}
          channel: ${{ inputs.emulator-channel }}
          profile: ${{ inputs.emulator-profile }}
          avd-name: '${{ inputs.emulator-channel }}_${{ inputs.emulator-target }}_${{ inputs.emulator-api-level }}'
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching"

      - name: Test Android (connected)
        # Android emulator needs to be disabled for macos-14 and 15
        # due to lack of nested virtualization on the M1 runner machines
        # (https://github.com/ReactiveCircus/android-emulator-runner/issues/350)
        if: ${{ inputs.run-android-tests == true && !startsWith(github.ref, 'refs/tags/') && matrix.os != 'macos-14' && matrix.os != 'macos-15' && matrix.os != 'macos-26' }}
        uses: reactivecircus/android-emulator-runner@v2
        with:
          target: ${{ inputs.emulator-target }}
          api-level: ${{ inputs.emulator-api-level }}
          arch: ${{ steps.setup.outputs.android-arch }}
          channel: ${{ inputs.emulator-channel }}
          profile: ${{ inputs.emulator-profile }}
          avd-name: '${{ inputs.emulator-channel }}_${{ inputs.emulator-target }}_${{ inputs.emulator-api-level }}'
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: adb logcat *:E TestRunner:V & swift test --filter XCSkipTests

      - name: "Release"
        if: ${{ startsWith(matrix.os, 'macos-') && startsWith(github.ref, 'refs/tags/') }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ -d "skip-export" ]; then
            gh release create "${RELTAG}" -t "Release ${RELTAG}" --generate-notes skip-export/*.*
          else
            gh release create "${RELTAG}" -t "Release ${RELTAG}" --generate-notes
          fi

